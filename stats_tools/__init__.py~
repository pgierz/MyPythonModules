# Stuff for the anomaly hatching:

def estimated_autocorrelation(x):
    """
    Since I don't like black boxes, I use my own autocorrelation so
    we know what is happening with the stats. Sources are given below:

    http://stackoverflow.com/q/14297012/190597
    http://en.wikipedia.org/wiki/Autocorrelation#Estimation

    Paul J. Gierz, Thu Jan 15 14:36:32 2015
    """
    n = len(x)
    variance = x.var()
    x = x-x.mean()
    r = np.correlate(x, x, mode='full')[-n:]
    result = r/(variance*(np.arange(n, 0, -1)))
    return result

################################################################################


@numba.jit
def compute_significance(file1, cfile, var, args, save=False):
    x = parse_file(file1, var, args)
    y = parse_file(cfile, var, args)
    dimnames = file1.variables[var].dimensions
    dimshape = file1.variables[var].data.shape
    dims = {}
    for i, j in zip(dimnames, dimshape):
        dims[i] = j
    sig_mask = np.zeros((dims['lat'], dims['lon']))
    for i in range(dims['lon']):
        for j in range(dims['lat']):
            if args.verbose >= 2:
                print str(i), str(j)
            xx = x[:, j, i]
            yy = y[:, j, i]
            autocorrx = max(estimated_autocorrelation(xx)[1], 0)
            autocorry = max(estimated_autocorrelation(yy)[1], 0)
            eff_dof1 = dims['time']*(1-autocorrx)/(1+autocorrx)
            eff_dof2 = dims['time']*(1-autocorry)/(1+autocorry)
            eff_dof_comb = min(eff_dof1, eff_dof2)
            cutoff = scipy.stats.t.ppf(0.975, eff_dof_comb)
            t_test = abs(xx.mean()-yy.mean())/((xx.var()/dims['time']+yy.var()/dims['time'])**0.5)
            if args.verbose >= 2:
                print "t-test is ", t_test
                print "cutoff is ", cutoff
                print "Effective Degrees of Freedom ", eff_dof_comb
            if t_test < cutoff:
                sig_mask[j, i] = 1
            else:
                sig_mask[j, i] = 0  # float("NaN")
    # Save sig_mask for netcdf!
    if save:  # This should never be called, it's a rudimentary test that only works on my private system...
        outfile = netcdf.netcdf_file('/Research/Tools/Python/significance_test_anomalies/file_out_sigmask.nc', 'a')
        outfile.createVariable('mask', None, ('lat', 'lon'))
        outfile.variables['mask'].data[:] = sig_mask
        outfile.close()
    return sig_mask
